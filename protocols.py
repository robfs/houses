from collections.abc import Sequence
from typing import Protocol


class PropertySite(Protocol):
    def get_property_url(self, *args, **kwargs) -> str: ...


class PropertyFetcher(Protocol):
    def supports_url(self, url: str) -> bool: ...
    def fetch(self, url: str) -> str: ...
    async def fetch_async(self, url: str) -> str: ...


class PropertyParser(Protocol):
    def supports_url(self, url: str) -> bool: ...
    def parse(self, content: str) -> dict: ...


class PropertyStore(Protocol):
    def set(self, url: str, data: dict, *args, **kwargs) -> str: ...
    def get(self, url: str) -> dict: ...
    def delete(self, url: str) -> str: ...
    def update(self, url: str, *args, **kwargs) -> str: ...
    def supports_url(self, url: str) -> bool: ...


class PropertyService(Protocol):
    site: PropertySite
    fetchers: Sequence[PropertyFetcher]
    parsers: Sequence[PropertyParser]
    stores: Sequence[PropertyStore]
